From 192184578b0dec0f88521891d86fc4efd0512e8b Mon Sep 17 00:00:00 2001
From: Robert Crossfield <robcrossfield@gmail.com>
Date: Sat, 16 Mar 2024 15:04:41 +1100
Subject: [PATCH 34/50] Implement map tile tracks, phase background music
 changes as soldiers walk around parts of the map

---
 Source/Amiga/Sound_Amiga.cpp |  34 ++++++--
 Source/Amiga/Sound_Amiga.hpp |   7 +-
 Source/Amiga/paula.cpp       |   3 +-
 Source/Amiga/paula.hpp       |   2 +
 Source/Fodder.cpp            | 161 ++++++++++++++++++++++++++++++++++-
 Source/Fodder.hpp            |  15 +++-
 Source/PC/Sound_PC.cpp       |   2 +-
 Source/PC/Sound_PC.hpp       |   2 +-
 Source/PC/Sound_PC2.cpp      |   2 +-
 Source/PC/Sound_PC2.hpp      |   2 +-
 Source/Sound.hpp             |   6 +-
 Source/Tiles.hpp             |  12 +++
 12 files changed, 229 insertions(+), 19 deletions(-)

diff --git a/Source/Amiga/Sound_Amiga.cpp b/Source/Amiga/Sound_Amiga.cpp
index 38c68eb..4d3d936 100644
--- a/Source/Amiga/Sound_Amiga.cpp
+++ b/Source/Amiga/Sound_Amiga.cpp
@@ -62,6 +62,9 @@ cSound_Amiga::cSound_Amiga() {
 	mVal = 0;
 	mLock = SDL_CreateMutex();
 
+	mPlayingTrack = -1;
+	mPlayingSong = -1;
+
 	mAudioSpec = 0;
 	mCurrentMusic = 0;
 	mCurrentSfx.resize(5);
@@ -103,7 +106,6 @@ void cSound_Amiga::audioBufferFill( short *pBuffer, int pBufferSize ) {
 					delete (*SfxIT);
 
 					*SfxIT = 0;
-					//SfxIT = mCurrentSfx.begin();
 				}
 
 				++SfxIT;
@@ -148,7 +150,7 @@ bool cSound_Amiga::devicePrepare() {
 	return true;
 }
 
-int16 cSound_Amiga::Track_Load( sSound* pSound, int16 pTrack ) {
+int16 cSound_Amiga::Track_Load( sSound* pSound, int16 pTrack, int16 pSong = -1) {
 	int16 Number = 0;
     const sSoundData *Tracks = CANNON_BASED(Tracks1, Tracks2);
     const sSoundData *Track = 0;
@@ -165,7 +167,7 @@ int16 cSound_Amiga::Track_Load( sSound* pSound, int16 pTrack ) {
 	// Mission
 	if (pTrack >= 0x32) {
 		Track = &Tracks[2 + (pTrack - 0x32)];
-		Number = 1;
+		Number = 2;
 	}
 
 	// Jon 
@@ -182,6 +184,9 @@ int16 cSound_Amiga::Track_Load( sSound* pSound, int16 pTrack ) {
 		pSound->mTrack = Track;
 	}
 
+	if (pSong >= 0)
+		Number = pSong;
+
 	return Number;
 }
 
@@ -208,15 +213,16 @@ void cSound_Amiga::Sound_Play( int16 pTileset, int16 pSoundEffect, int16 pVolume
     SDL_PauseAudioDevice(mVal, 0);
 }
 
-void cSound_Amiga::Music_Play( int16 pTrack ) {
+void cSound_Amiga::Music_Play( int16 pTrack, int16 pSong) {
 	
-	if (mPlayingTrack == pTrack)
+	if (mPlayingTrack == pTrack && mPlayingSong == pSong)
 		return;
 
-	int16 Number = Track_Load( &mSound_Music, pTrack );
+	int16 Number = Track_Load( &mSound_Music, pTrack, pSong);
 		
 	Music_Stop();
 	mPlayingTrack = pTrack;
+	mPlayingSong = pSong;
 
     if (mSound_Music.mCurrentMusicSongData && mSound_Music.mCurrentMusicInstrumentData) {
         if (mSound_Music.mCurrentMusicSongData->size() && mSound_Music.mCurrentMusicInstrumentData->size())
@@ -228,6 +234,7 @@ void cSound_Amiga::Music_Play( int16 pTrack ) {
 
 void cSound_Amiga::Music_Stop() {
 	mPlayingTrack = -1;
+	mPlayingSong = -1;
 
 	if (SDL_LockMutex( mLock ) == 0) {
 
@@ -238,6 +245,21 @@ void cSound_Amiga::Music_Stop() {
 	}
 }
 
+void cSound_Amiga::Music_SetVolume(int16 pChannel, int16 pVolume) {
+	if (mCurrentMusic == 0)
+		return;
+
+	mCurrentMusic->volumeMax = pVolume;
+//	auto channel = mCurrentMusic->getChannel(pChannel);
+//	channel->volume = pVolume;
+}
+
+int16 cSound_Amiga::Music_GetVolume(int16 pChannel) {
+	return mCurrentMusic->volumeMax;
+	//auto channel = mCurrentMusic->getChannel(pChannel);
+	//return channel->volume;
+}
+
 void cSound_Amiga::Sound_Stop() {
 	
 	if (SDL_LockMutex( mLock ) == 0) {
diff --git a/Source/Amiga/Sound_Amiga.hpp b/Source/Amiga/Sound_Amiga.hpp
index c36f00f..9cd59a6 100644
--- a/Source/Amiga/Sound_Amiga.hpp
+++ b/Source/Amiga/Sound_Amiga.hpp
@@ -60,11 +60,14 @@ public:
 
 	void				audioBufferFill( short *pBuffer, int pBufferSize );
 
-	int16				Track_Load( sSound* pSound, int16 pTrack );
+	int16				Track_Load( sSound* pSound, int16 pTrack, int16 pSong );
 	void				Sound_Play( int16 pTileset, int16 pSoundEffect, int16 pVolume, int16 pIndex);
 
-	void				Music_Play( int16 pTrack );
+	void				Music_Play( int16 pTrack, int16 pSong);
     void				Music_Stop();
+	void				Music_SetVolume(int16 pChannel, int16 pVolume);
+	int16				Music_GetVolume(int16 pChannel);
+
 	void				Sound_Stop();
         
     
diff --git a/Source/Amiga/paula.cpp b/Source/Amiga/paula.cpp
index ba87951..45aeb65 100644
--- a/Source/Amiga/paula.cpp
+++ b/Source/Amiga/paula.cpp
@@ -60,6 +60,7 @@ Paula::Paula(bool stereo, int rate, uint32 interruptFreq, FilterMode filterMode,
 	_timerBase = 1;
 	_playing = false;
 	_end = true;
+	volumeMax = 0x40;
 }
 
 Paula::~Paula() {
@@ -217,7 +218,7 @@ int Paula::readBufferIntern(int16 *buffer, const int numSamples) {
 			// processing, to obtain the correct output 'rate'.
 			frac_t rate = doubleToFrac(_periodScale / _voice[voice].period);
 			// Cap the volume
-			_voice[voice].volume = std::min((uint8) 0x40, _voice[voice].volume);
+			_voice[voice].volume = std::min((uint8) volumeMax, _voice[voice].volume);
 
 
 			Channel &ch = _voice[voice];
diff --git a/Source/Amiga/paula.hpp b/Source/Amiga/paula.hpp
index afc68cf..11d8c04 100644
--- a/Source/Amiga/paula.hpp
+++ b/Source/Amiga/paula.hpp
@@ -105,6 +105,8 @@ public:
 		float rc[NUM_VOICES][5];
 	};
 
+	uint8 volumeMax;
+
 	Paula(bool stereo = false, int rate = 44100, unsigned int interruptFreq = 0,
 	      FilterMode filterMode = kFilterModeDefault, int periodScaleDivisor = 1);
 	~Paula();
diff --git a/Source/Fodder.cpp b/Source/Fodder.cpp
index 0e9b606..7374827 100644
--- a/Source/Fodder.cpp
+++ b/Source/Fodder.cpp
@@ -406,6 +406,7 @@ int16 cFodder::Phase_Cycle() {
     Sound_Tick();
 	Squad_EnteredVehicle_TimerTick();
 	Squad_Set_CurrentVehicle();
+    sub_87774();
 
 	// No squad is selected, so set count down timer
 	if (mSquad_Selected < 0 && !mSquad_Select_Timer)
@@ -447,6 +448,7 @@ void cFodder::Phase_Prepare() {
 	//seg000:05D1
 
 	Phase_Goals_Set();
+    Map_Load_TileTracks();
 
 	Sprite_Bullet_SetData();
 	Sprite_Handle_Loop();
@@ -550,6 +552,9 @@ void cFodder::Game_Handle() {
         return;
     }
 
+    //word_80618
+    sub_878A2();
+
     if (!mSoundEffectToPlay)
         return;
 
@@ -994,6 +999,10 @@ void cFodder::Phase_EngineReset() {
     mMapTile_Row_CurrentScreen = 0;
 
     mTroop_InRange_Callpad = 0;
+    mMusicTrack_unk = 0;
+    mMusicCurrentTrack = 0;
+    mMusicTargetVolume = 0;
+    word_829F6 = 0;
 }
 
 void cFodder::Phase_SquadPrepare() {
@@ -1780,6 +1789,145 @@ void cFodder::Map_Load() {
     Map_Load_Resources();
 }
 
+void cFodder::Map_Load_TileTracks() {
+    uint8* tilePtr = mMap->data() + 0x62;
+
+    uint16_t heightCount = 0, widthCount;
+
+    mMapTileTracks.clear();
+
+    while (heightCount < mMapLoaded->getHeight()) {
+        widthCount = 0;
+
+        while (widthCount < mMapLoaded->getWidth()) {
+            uint16_t tile = (readLE<uint16>(tilePtr) & 0xE000) >> 8;
+
+            if (tile != 0) {
+                mMapTileTracks.emplace_back( widthCount , heightCount, tile >> 5 );
+            }
+
+            tilePtr += 2;
+            widthCount++;
+        }
+
+        heightCount++;
+    }
+}
+
+
+void cFodder::sub_87774() {
+    if (mPhase_Completed_Timer != 0 || mGame_Data.mGamePhase_Data.mIsComplete || !mMapTile_Music_Play)
+        return;
+
+    if (mSquad_Leader == INVALID_SPRITE_PTR || mSquad_Leader == 0)
+        return;
+
+    int16_t spriteX = mSquad_Leader->field_0 >> 4;
+    int16_t spriteY = mSquad_Leader->field_4 >> 4;
+
+    int16_t BestDistance = 0x10;
+    int16_t PlaySong = 0;
+
+    for (const auto& tile : mMapTileTracks) {
+        if (tile.X < 0)
+            break;
+
+        if (tile.Track > 4)
+            continue;
+
+        // Call to sub_A10F2
+        int16_t d0 = spriteX;
+        int16_t d1 = spriteY;
+        int16_t d2 = tile.X;
+        int16_t d3 = tile.Y;
+        int16_t d4 = 0x0F;
+        int16_t result = Map_Get_Distance_BetweenPoints(d0, d1, d2, d4, d3);
+
+        if (result < BestDistance) {
+            BestDistance = result;
+            PlaySong = tile.Track;
+        }
+    }
+
+
+    int16_t d0, d1;
+
+    if (BestDistance > 4) {
+        if (BestDistance >= 0xA) {
+            d0 = 1;
+            d1 = (BestDistance - 8) << 1;
+            d1 = d1 < 0x30 ? d1 : 0x30;
+        }
+        else {
+            d0 = PlaySong;
+            d1 = (BestDistance - 5) << 3;
+            d1 = 0x38 - d1;
+        }
+    }
+    else {
+        d0 = PlaySong;
+        d1 = 0x40;
+    }
+
+    Music_setup_track_unk(d0, d1);
+}
+
+void cFodder::sub_878A2() {
+    int16_t d0 = mMusicTrack_unk;
+
+    if (d0 == 0)
+        return;
+
+    int8_t d1 = mSound->Music_GetVolume(0);// byte_A4B5E[0x28];
+
+    // Changing track?
+    if (mMusicCurrentTrack != d0) {
+        --d1;
+
+        // Once volume below 8, change to new song
+        if (d1 < 8) {
+            d1 = 8;
+            mMusicCurrentTrack = d0;
+            Music_Play_Tileset(d0);
+        }
+    } else {
+
+        if (d1 < mMusicTargetVolume) {
+            d1++;
+        } else {
+            d1 = mMusicTargetVolume;
+            mMusicTrack_unk = 0;
+        }
+    }
+
+    //loc_878F4
+    // 
+    mSound->Music_SetVolume(0, d1);
+    //byte_A4B5E[0x28] = d1;
+
+    if (word_829F6 == 0) {
+        //byte_A4B5E[0x29] = d1;
+    }
+}
+
+void cFodder::Music_setup_track_unk(int16_t d0, int16_t d1) {
+    if (mMusicTrack_unk != 0)
+        return;
+
+    if (mMusicCurrentTrack != d0) {
+        mMusicTargetVolume = d1;
+        mMusicTrack_unk = d0;
+    }
+    else {
+        //byte_A4B5E[0x28] = (uint8_t)d1;
+        mSound->Music_SetVolume(0, d1);
+
+        if (word_829F6 == 0) {
+           // byte_A4B5E[0x29] = (uint8_t)d1;
+        }
+    }
+}
+
 /**
  * Load the Base and Sub Tile BLK Files
  *
@@ -1883,9 +2031,16 @@ void cFodder::Map_Load_Resources() {
     mGraphics->PaletteSet();
 }
 
-void cFodder::Music_Play_Tileset() {
-    if (!mStartParams->mDisableSound)
-        mSound->Music_Play(mMapLoaded->getTileType() + 0x32);
+void cFodder::Music_Play_Tileset(int16_t pSong) {
+    mMapTile_Music_Play = true;
+
+    if (!mStartParams->mDisableSound) {
+        if (pSong == -1)
+            pSong = 2;
+
+        mSound->Music_Play(mMapLoaded->getTileType() + 0x32, pSong);
+        mSound->Music_SetVolume(0, 0);
+    }
 }
 
 void cFodder::Camera_Pan_To_Target() {
diff --git a/Source/Fodder.hpp b/Source/Fodder.hpp
index 3029227..d902d04 100644
--- a/Source/Fodder.hpp
+++ b/Source/Fodder.hpp
@@ -182,6 +182,13 @@ public:
     int32           mMapTile_TargetX;
     int32           mMapTile_TargetY;
 
+    bool            mMapTile_Music_Play;
+    
+    int16           mMusicTrack_unk;
+    int16           mMusicCurrentTrack;
+    int16           mMusicTargetVolume;
+    int16           word_829F6;
+
     int16           mCamera_Panning_ToTarget;
     int32           mCamera_AccelerationX;
     int32           mCamera_AccelerationY;
@@ -360,6 +367,8 @@ public:
     sSprite*        mSquad_CurrentVehicles[3];
     sSprite*        mSquad_CurrentVehicle;
 
+    std::vector<sTileTrack> mMapTileTracks;
+
     bool           mSprite_HumanVehicles_Found;
     std::vector<sSprite*>        mSprites_HumanVehicles;
     int16           dword_3B24B;
@@ -599,6 +608,9 @@ public:
     void            Map_Load_Sprites();
     void			Map_Load_Sprites_Count();
     void            Map_Load_Resources();
+    void            Map_Load_TileTracks();
+    void            sub_87774();
+    void            sub_878A2();
 
     void			Map_Add_Structure(const sStructure& pStructure, int16 pTileX, int16 pTileY);
 
@@ -606,7 +618,8 @@ public:
     int16			Tile_FindType(const eTerrainFeature pType);
     std::vector<int16> Tile_FindType(const eTerrainFeature pType, const eTerrainFeature pType2);
 
-    void            Music_Play_Tileset();
+    void            Music_Play_Tileset(int16_t pSong = -1);
+    void            Music_setup_track_unk(int16_t d0, int16_t d1);
 
     // Mission Functions
     void            Phase_Soldiers_Count();
diff --git a/Source/PC/Sound_PC.cpp b/Source/PC/Sound_PC.cpp
index 5c10156..43ac00d 100644
--- a/Source/PC/Sound_PC.cpp
+++ b/Source/PC/Sound_PC.cpp
@@ -167,7 +167,7 @@ void cSound_PC::Music_Stop() {
 	Mix_FadeOutMusic(500);
 }
 
-void cSound_PC::Music_Play( int16 pTrack ) {
+void cSound_PC::Music_Play( int16 pTrack, int16 pSong) {
 	
 	if (mPlayingTrack == pTrack)
 		return;
diff --git a/Source/PC/Sound_PC.hpp b/Source/PC/Sound_PC.hpp
index a242e0b..f3ef107 100644
--- a/Source/PC/Sound_PC.hpp
+++ b/Source/PC/Sound_PC.hpp
@@ -45,7 +45,7 @@ class cSound_PC : public cSound {
 
 	void				Sound_Play( int16 pTileset, int16 pSoundEffect, int16 pVolume, int16 pIndex);
 
-	void				Music_Play( int16 pTrack );
+	void				Music_Play( int16 pTrack, int16 pSong);
 	void				Music_PlayFile( const std::string& pFilename );
 	void				Music_Stop();
 
diff --git a/Source/PC/Sound_PC2.cpp b/Source/PC/Sound_PC2.cpp
index 94af0ea..c38e200 100644
--- a/Source/PC/Sound_PC2.cpp
+++ b/Source/PC/Sound_PC2.cpp
@@ -234,7 +234,7 @@ void cSound_PC2::Music_Stop() {
 	Mix_FadeOutMusic(500);
 }
 
-void cSound_PC2::Music_Play( int16 pTrack ) {
+void cSound_PC2::Music_Play( int16 pTrack, int16 pSong) {
     std::string filename;
 
     if (mPlayingTrack == pTrack)
diff --git a/Source/PC/Sound_PC2.hpp b/Source/PC/Sound_PC2.hpp
index 5e5e23b..f1dce05 100644
--- a/Source/PC/Sound_PC2.hpp
+++ b/Source/PC/Sound_PC2.hpp
@@ -43,7 +43,7 @@ class cSound_PC2 : public cSound {
 
 	void				Sound_Play( int16 pBx, int16 pData4, int16 pData8, int16 pIndex);
 
-	void				Music_Play( int16 pTrack );
+	void				Music_Play( int16 pTrack, int16 pSong);
 	void				Music_PlayFile( const char* pFilename );
 	void				Music_Stop();
 
diff --git a/Source/Sound.hpp b/Source/Sound.hpp
index 15b06c8..fa84bdb 100644
--- a/Source/Sound.hpp
+++ b/Source/Sound.hpp
@@ -42,6 +42,7 @@ class cSound {
 
 protected:
 	int16				mPlayingTrack;
+	int16				mPlayingSong;
 
 	public:
 
@@ -51,9 +52,10 @@ protected:
 	virtual void		Sound_Play( int16 pTileset, int16 pSoundEffect, int16 pVolume, int16 pIndex ) = 0;
 	virtual void		Sound_Stop() { }
 
-	virtual void		Music_Play( int16 pTrack ) = 0;
+	virtual void		Music_Play( int16 pTrack, int16 pSong = -1) = 0;
 	virtual void		Music_Stop() = 0;
-
+	virtual void		Music_SetVolume(int16 pChannel, int16 pVolume) {};
+	virtual int16		Music_GetVolume(int16 pChannel) { return 0; }
 	virtual void		Stop() {
 		Music_Stop();
 		Sound_Stop();
diff --git a/Source/Tiles.hpp b/Source/Tiles.hpp
index 6b7a043..3cfe395 100644
--- a/Source/Tiles.hpp
+++ b/Source/Tiles.hpp
@@ -44,6 +44,18 @@ struct sTileType {
 	std::string mFullName;
 };
 
+struct sTileTrack {
+	uint16_t X;
+	uint16_t Y;
+	uint8_t Track;
+
+	sTileTrack(uint16_t pX,uint16_t pY, uint8_t pTrack) {
+		X = pX;
+		Y = pY;
+		Track = pTrack;
+	}
+};
+
 struct sStructureTile {
 	int16 mX;
 	int16 mY;
-- 
2.25.1

